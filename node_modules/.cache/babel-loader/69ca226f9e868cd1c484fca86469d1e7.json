{"ast":null,"code":"var _jsxFileName = \"/Applications/project1/json-to-table/src/Containers/Table.js\";\nimport React, { Component } from 'react';\nimport './Table.css'; //import tableJSON from \"../Assets/\"\n\nclass Table extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tableJSON: null\n    };\n\n    this.onLoad = response => {\n      this.setState({\n        tableJSON: response.data\n      });\n      console.log(this.state.tableJSON);\n    };\n\n    this.colClickHandler = (filterable, sortable, id, indexIdentifier) => {\n      /*if(sortable){\n          let upDatedRowSON;\n          upDatedRowSON = tableJSON.rowData.sort((a,b)=>{\n              return (a.data[indexIdentifier].value)-b.data[indexIdentifier].value\n          })\n          console.log(upDatedtableJSON);\n          var tableJSON={...tableJSON,}\n          this.setState({\n              tableJSON : upDatedtableJSON\n          })\n      }*/\n    };\n  }\n\n  componentDidMount() {\n    fetch('../Assets/table-json.json').then(res => res.json()).then(this.onLoad);\n  }\n\n  render() {\n    console.log(this.state.tableJson);\n    let tableheader = null,\n        tablerows = null;\n    tableheader = this.state.tableJSON.columnHeaders.map((colheaderData, ind) => {\n      return React.createElement(\"th\", {\n        key: colheaderData.id,\n        id: colheaderData.id,\n        label: colheaderData.label,\n        \"data-sortable\": colheaderData.sortable,\n        \"data-filterable\": colheaderData.filterable,\n        onClick: () => {\n          this.colClickHandler(colheaderData.filterable, colheaderData.sortable, colheaderData.id, ind);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, colheaderData.label);\n    });\n    tablerows = this.state.tableJSON.rowData.map(rowData => {\n      return React.createElement(\"tr\", {\n        key: rowData.id,\n        id: rowData.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, rowData.data.map(rowDataConf => {\n        return React.createElement(\"td\", {\n          label: rowDataConf.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, rowDataConf.value);\n      }));\n    });\n    return React.createElement(\"div\", {\n      className: \"Table-wraper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, tableheader), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, tablerows)));\n  }\n\n}\n\nexport default Table;","map":{"version":3,"sources":["/Applications/project1/json-to-table/src/Containers/Table.js"],"names":["React","Component","Table","state","tableJSON","onLoad","response","setState","data","console","log","colClickHandler","filterable","sortable","id","indexIdentifier","componentDidMount","fetch","then","res","json","render","tableJson","tableheader","tablerows","columnHeaders","map","colheaderData","ind","label","rowData","rowDataConf","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,aAAP,C,CACA;;AACA,MAAMC,KAAN,SAAoBD,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC1BE,KAD0B,GAClB;AACJC,MAAAA,SAAS,EAAG;AADR,KADkB;;AAAA,SAU1BC,MAV0B,GAUhBC,QAAD,IAAc;AACnB,WAAKC,QAAL,CAAc;AACVH,QAAAA,SAAS,EAAGE,QAAQ,CAACE;AADX,OAAd;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWC,SAAvB;AACH,KAfyB;;AAAA,SAgB1BO,eAhB0B,GAgBR,CAACC,UAAD,EAAYC,QAAZ,EAAqBC,EAArB,EAAwBC,eAAxB,KAA4C;AAC1D;;;;;;;;;;;AAWH,KA5ByB;AAAA;;AAK1BC,EAAAA,iBAAiB,GAAI;AACjBC,IAAAA,KAAK,CAAC,2BAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQ,KAAKb,MAFb;AAGH;;AAoBDgB,EAAAA,MAAM,GAAG;AACLZ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWmB,SAAvB;AACA,QAAIC,WAAW,GAAG,IAAlB;AAAA,QAAwBC,SAAS,GAAG,IAApC;AACAD,IAAAA,WAAW,GAAG,KAAKpB,KAAL,CAAWC,SAAX,CAAqBqB,aAArB,CAAmCC,GAAnC,CAAuC,CAACC,aAAD,EAAeC,GAAf,KAAuB;AACxE,aACI;AAAI,QAAA,GAAG,EAAED,aAAa,CAACb,EAAvB;AAA2B,QAAA,EAAE,EAAEa,aAAa,CAACb,EAA7C;AAAiD,QAAA,KAAK,EAAEa,aAAa,CAACE,KAAtE;AACI,yBAAeF,aAAa,CAACd,QADjC;AAEI,2BAAiBc,aAAa,CAACf,UAFnC;AAE+C,QAAA,OAAO,EAAE,MAAI;AAAC,eAAKD,eAAL,CAAqBgB,aAAa,CAACf,UAAnC,EAA8Ce,aAAa,CAACd,QAA5D,EAAqEc,aAAa,CAACb,EAAnF,EAAsFc,GAAtF;AAA2F,SAFxJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGKD,aAAa,CAACE,KAHnB,CADJ;AAOH,KARa,CAAd;AASAL,IAAAA,SAAS,GAAG,KAAKrB,KAAL,CAAWC,SAAX,CAAqB0B,OAArB,CAA6BJ,GAA7B,CAAiCI,OAAO,IAAI;AACpD,aACI;AAAI,QAAA,GAAG,EAAEA,OAAO,CAAChB,EAAjB;AAAqB,QAAA,EAAE,EAAEgB,OAAO,CAAChB,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKgB,OAAO,CAACtB,IAAR,CAAakB,GAAb,CAAkBK,WAAD,IAAiB;AAC/B,eACI;AAAI,UAAA,KAAK,EAAEA,WAAW,CAACjB,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKiB,WAAW,CAACC,KADjB,CADJ;AAKH,OANA,CADL,CADJ;AAWH,KAZW,CAAZ;AAcA,WACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKT,WADL,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKC,SADL,CAJJ,CADJ,CADJ;AAYH;;AAnEyB;;AAqE9B,eAAetB,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport './Table.css';\n//import tableJSON from \"../Assets/\"\nclass Table extends Component {\n    state = {\n        tableJSON : null\n    }\n\n    componentDidMount () {\n        fetch('../Assets/table-json.json')\n          .then(res => res.json())\n          .then(this.onLoad);\n    }\n    onLoad = (response) => {\n        this.setState({\n            tableJSON : response.data\n        });\n        console.log(this.state.tableJSON);\n    }\n    colClickHandler = (filterable,sortable,id,indexIdentifier) => {\n        /*if(sortable){\n            let upDatedRowSON;\n            upDatedRowSON = tableJSON.rowData.sort((a,b)=>{\n                return (a.data[indexIdentifier].value)-b.data[indexIdentifier].value\n            })\n            console.log(upDatedtableJSON);\n            var tableJSON={...tableJSON,}\n            this.setState({\n                tableJSON : upDatedtableJSON\n            })\n        }*/\n    }\n    render() {\n        console.log(this.state.tableJson);\n        let tableheader = null, tablerows = null;\n        tableheader = this.state.tableJSON.columnHeaders.map((colheaderData,ind) => {\n            return (\n                <th key={colheaderData.id} id={colheaderData.id} label={colheaderData.label}\n                    data-sortable={colheaderData.sortable}\n                    data-filterable={colheaderData.filterable} onClick={()=>{this.colClickHandler(colheaderData.filterable,colheaderData.sortable,colheaderData.id,ind)}}> \n                    {colheaderData.label} \n                </th>\n            )\n        })\n        tablerows = this.state.tableJSON.rowData.map(rowData => {\n            return (\n                <tr key={rowData.id} id={rowData.id}>\n                    {rowData.data.map((rowDataConf) => {\n                        return(\n                            <td label={rowDataConf.id}>\n                                {rowDataConf.value}\n                            </td>\n                        )\n                    })}\n                </tr>\n            )\n        })\n        \n        return (\n            <div className=\"Table-wraper\">\n                <table>\n                    <tr>\n                        {tableheader}\n                    </tr>\n                    <tbody>\n                        {tablerows}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\nexport default Table;"]},"metadata":{},"sourceType":"module"}