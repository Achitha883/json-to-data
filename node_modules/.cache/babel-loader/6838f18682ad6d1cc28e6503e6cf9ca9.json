{"ast":null,"code":"var _jsxFileName = \"/Applications/project1/json-to-table/src/Containers/Table.js\";\nimport React, { Component } from 'react';\nimport './Table.css';\nimport * as data from \"../Assets/table-json.json\";\n\nclass Table extends Component {\n  constructor(props) {\n    state = {\n      tableJSON: data.default\n    };\n    super(props);\n\n    this.getKeys = function () {};\n\n    this.getHeader = function () {};\n\n    this.getRowsData = function () {};\n\n    this.colClickHandler = (key, data) => {\n      this.setState({\n        tableJSON: this.state.tableJSON.rowData.sort((a, b) => {\n          //const asc = this.state.directionSymbol[key] === 'asc';\n          const asc = true;\n\n          if (a[key] < b[key]) {\n            return asc ? -1 : 1;\n          } else if (a[key] > b[key]) {\n            return asc ? 1 : -1;\n          } else {\n            return 0;\n          }\n        })\n      });\n    };\n\n    this.getHeader = this.getHeader.bind(this);\n    this.getRowsData = this.getRowsData.bind(this);\n    this.getKeys = this.getKeys.bind(this);\n  }\n\n  /*if(sortable){\n      let upDatedtableJSON;\n      upDatedRowSON = tableJSON.rowData.sort((a,b)=>{\n          return (a.data[indexIdentifier].value)-b.data[indexIdentifier].value\n      })\n      console.log(upDatedtableJSON);\n      \n      this.setState({\n          tableJSON : upDatedtableJSON\n      })\n  }*/\n  //}\n  render() {\n    let tableheader = null,\n        tablerows = null;\n    tableheader = this.state.tableJSON.columnHeaders.map((colheaderData, ind) => {\n      return React.createElement(\"th\", {\n        key: colheaderData.id,\n        id: colheaderData.id,\n        label: colheaderData.label,\n        \"data-sortable\": colheaderData.sortable,\n        \"data-filterable\": colheaderData.filterable,\n        onClick: () => {\n          this.colClickHandler(colheaderData.id, this.tableJSON);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, colheaderData.label);\n    });\n    tablerows = this.state.tableJSON.rowData.map(rowData => {\n      return React.createElement(\"tr\", {\n        key: rowData.id,\n        id: rowData.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, rowData.data.map(rowDataConf => {\n        return React.createElement(\"td\", {\n          key: rowDataConf.id,\n          label: rowDataConf.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, rowDataConf.value);\n      }));\n    });\n    return React.createElement(\"div\", {\n      className: \"Table-wraper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, tableheader)), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, tablerows)));\n  }\n\n}\n\nexport default Table;","map":{"version":3,"sources":["/Applications/project1/json-to-table/src/Containers/Table.js"],"names":["React","Component","data","Table","constructor","props","state","tableJSON","default","getKeys","getHeader","getRowsData","colClickHandler","key","setState","rowData","sort","a","b","asc","bind","render","tableheader","tablerows","columnHeaders","map","colheaderData","ind","id","label","sortable","filterable","rowDataConf","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Table.css';\nimport * as data from \"../Assets/table-json.json\";\nclass Table extends Component {\n    constructor(props){\n        state = {\n            tableJSON : data.default\n        }\n        super(props);\n        this.getHeader = this.getHeader.bind(this);\n        this.getRowsData = this.getRowsData.bind(this);\n        this.getKeys = this.getKeys.bind(this);\n    }\n        \n    getKeys = function(){\n    \n    }\n    \n    getHeader = function(){\n    \n    }\n    \n    getRowsData = function(){\n    \n    }\n    //colClickHandler = (filterable,sortable,id,indexIdentifier) => {\n        colClickHandler = (key,data) => {\n            this.setState({\n                tableJSON : this.state.tableJSON.rowData.sort((a, b) => {\n                    //const asc = this.state.directionSymbol[key] === 'asc';\n                    const asc= true;\n                    if (a[key] < b[key]) {\n                        return asc ? -1 : 1;\n                    } else if (a[key] > b[key]) {\n                        return asc ? 1 : -1;\n                    } else {\n                        return 0;\n                    }\n                }),\n\n                \n            })\n        }\n    \n        /*if(sortable){\n            let upDatedtableJSON;\n            upDatedRowSON = tableJSON.rowData.sort((a,b)=>{\n                return (a.data[indexIdentifier].value)-b.data[indexIdentifier].value\n            })\n            console.log(upDatedtableJSON);\n            \n            this.setState({\n                tableJSON : upDatedtableJSON\n            })\n        }*/\n    //}\n    render() {\n        let tableheader = null, tablerows = null;\n        \n        tableheader = this.state.tableJSON.columnHeaders.map((colheaderData,ind) => {\n            return (\n              \n                <th key={colheaderData.id} id={colheaderData.id} label={colheaderData.label}\n                    data-sortable={colheaderData.sortable}\n                    data-filterable={colheaderData.filterable} onClick={()=>{this.colClickHandler(colheaderData.id,this.tableJSON)}}> \n                    {colheaderData.label} \n                </th>\n            )\n        })\n        tablerows = this.state.tableJSON.rowData.map(rowData => {\n            return (\n                <tr key={rowData.id} id={rowData.id}>\n                    {rowData.data.map((rowDataConf) => {\n                        return(\n                            <td key={rowDataConf.id} label={rowDataConf.id}>\n                                {rowDataConf.value}\n                            </td>\n                        )\n                    })}\n                </tr>\n            )\n        })\n        \n        return (\n            <div className=\"Table-wraper\">\n                <table>\n                    <thead>\n                        <tr>\n                            {tableheader}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {tablerows}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\nexport default Table;"]},"metadata":{},"sourceType":"module"}